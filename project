#22/10/18
#rename files?

import os

path = 'C:\\Users\\Amy\\Desktop\\Com. Science\\Project\\SeamusVennDiagram'
files = os.listdir(path)
i = 1

for file in files:
    filename, file_extension = os.path.splitext(file)
    os.rename(os.path.join(path, file), os.path.join(path, filename + str(i) + file_extension))
    i = i+1


#cropped images - all diff sizes?

cropped = np.empty(len(onlyfiles), dtype=object)

for n in range(0, len(onlyfiles)):
	  cropped[n] = images[n][50:730, 350:1520]

print('img1 type:',type(cropped[16]),'and shape:', np.shape(cropped[16]))
#cv2.imshow('image[43]', cropped[43])


#gray vs colour sub

images = np.empty(len(onlyfiles), dtype=object)
gray = np.empty(len(onlyfiles), dtype=object)

for n in range(0, len(onlyfiles)):
  images[n] = cv2.imread( join(mypath,onlyfiles[n]) )
	  gray[n] = cv2.cvtColor(resizeImages[n], cv2.COLOR_BGR2GRAY)

subsag = np.empty(len(onlyfiles), dtype=object)
subsa = np.empty(len(onlyfiles), dtype=object)

for i in range(1, len(onlyfiles)-1):
  subsag[i] = cv2.subtract(gray[i], gray[len(onlyfiles)-1])
  subsa[i] = cv2.subtract(resizeImages[i], resizeImages[len(onlyfiles)-1])
	
cv2.imshow('cv2_subsag30', subsag[30])
cv2.imshow('cv2_subsa30', subsa[30])


#sol-ans vs ans-sol

subsa = np.empty(len(onlyfiles), dtype=object)
subas = np.empty(len(onlyfiles), dtype=object)

for i in range(1, len(onlyfiles)-1):
  subsa[i] = cv2.subtract(gray[i], gray[len(onlyfiles)-1])
  subas[i] = cv2.subtract(gray[len(onlyfiles)-1], gray[i])



#23/10/18

#contours on an image
#could make array to put contours on them all?

img = cv2.imread('C:\\Users\\Amy\\Desktop\\Com. Science\\Project\\SeamusVennDiagram\\student26.jpg')
imgray = cv2.cvtColor(img ,cv2.COLOR_BGR2GRAY)
ret,thresh = cv2.threshold(imgray,127,255,0)
im2, contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
cv2.imshow('contours',cv2.drawContours(img, contours, -1, (0,255,0), 3))


#find a template in an image *not working yet*
img = cv2.imread('C:\\Users\\Amy\\Desktop\\Com. Science\\Project\\SeamusVennDiagram\\student26.jpg',0)
img2 = img.copy()
template = cv2.imread('C:\\Users\\Amy\\Desktop\\Com. Science\\Project\\SeamusVennDiagram\\student44.jpg',0)
w, h = template.shape[::-1]
 
# All the 6 methods for comparison in a list
methods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR',
           'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']

for meth in methods:
  img = img2.copy()
  method = eval(meth)
 
  # Apply template Matching  
  res = cv2.matchTemplate(img,template,method)
  min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
 
  # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
  if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
    top_left = min_loc
  else:
    top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)
 
  cv2.rectangle(img,top_left, bottom_right, 255, 2)
 
  plt.subplot(121),plt.imshow(res,cmap = 'gray')
  plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
  plt.subplot(122),plt.imshow(img,cmap = 'gray')
  plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
  plt.suptitle(meth)

  plt.show()
